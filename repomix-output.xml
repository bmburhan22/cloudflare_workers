This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
index.html
migrations/0001_initial_schema.sql
package.json
README.md
src/App.jsx
src/index.css
src/main.jsx
task.md
utils.js
vite.config.js
worker.js
wrangler.toml
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="task.md">
We need a single public page where guests pick the property and check-in date, choose the activities they'll use, tick one master acceptance, initial each chosen module, draw a signature, and submit. 

The flow minimizes clicks: no extra checkboxes beyond the master one, just one initials field per selected activity, and a drawn canvas signature for evidentiary weight. After submit, guests get one email containing only the PDFs for the activities they selected (e.g., pick 3/5 gives 3 attachments) plus an on-page summary of what was sent. If Archery is selected, the success screen also reveals the PIN 1234 and the same PIN appears in the email. Otherwise we just confirm the email dispatch. We do not recall prior waivers by email or reservation since each submission stands alone, reducing guest friction and avoiding cross-stay ambigR̥̥uity.

Implement everything on Cloudflare with minimal code and no servers: a single Worker serving the ES2025 SPA and APIs, Browser Rendering to convert per-activity HTML into PDFs, R2 for PDF storage, D1 for a tiny searchable ledger, KV for the property/amenity JSON, and Email Sending for delivery. Provide four endpoints: GET / (form), POST /submit (validate, render N PDFs, save to R2, write D1, send one email), GET /admin/search (lookup by name/email/property/date), and GET /status, organized as small ES modules. Keep secrets/config in the Worker (ARCHERY_PIN=1234, EMAIL_FROM, legal/version flags) and stamp each PDF with property, activity, check-in date, initials, signature image, hashes, and legal text version. Use predictable R2 keys (waivers/YYYY/MM/DD/{propertyId}/{activity}/{last-first}-{shortid}.pdf) and write one D1 row per submission plus one per document for quick audits without downloading binaries. The UI is a single page: property selector, date, name, email, activity c̥hips revealing brief risk text + initials, a high-DPI signature pad, one Submit, then "Email sent" and (if applicable) the Archery PIN.

Code must be DRY, modern ES2025 and without code comments. Minimal (ideally none) libraries and minimum files.
`

- Parallel puppeteer browsers
- No KV store for most things as it messes with review of multiple branches
- GitHub connected to Cloudflare worker in settings for auto builds
- Modern succinct ES2025
- Ability for guest to view waiver in full
- background processing so submit button is fast
- etc
Instead of Cursor as a learning experience
and ask it to auto deploy with wrangler, auto test it, etc

Once you receive money, please share github repo to vitaliy.hayda@gmail.com and make sure that you do 

npx repomix@latest
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Activity Waiver System</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
</file>

<file path="migrations/0001_initial_schema.sql">
-- Migration: Initial schema
-- Created: 2024-01-01

CREATE TABLE IF NOT EXISTS submissions (
  id TEXT PRIMARY KEY,
  property TEXT NOT NULL,
  checkin_date TEXT NOT NULL,
  name TEXT NOT NULL,
  email TEXT NOT NULL,
  activities TEXT NOT NULL,
  activity_initials TEXT NOT NULL,
  signature TEXT NOT NULL,
  created_at TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS documents (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  submission_id TEXT NOT NULL,
  activity TEXT NOT NULL,
  storage_key TEXT NOT NULL,
  created_at TEXT NOT NULL,
  FOREIGN KEY (submission_id) REFERENCES submissions (id)
);

CREATE INDEX IF NOT EXISTS idx_submissions_lookup ON submissions (name, email, property, checkin_date);
CREATE INDEX IF NOT EXISTS idx_documents_submission ON documents (submission_id);
</file>

<file path="src/main.jsx">
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
</file>

<file path="vite.config.js">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  build: {
    outDir: 'dist',
    rollupOptions: {
      output: {
        entryFileNames: 'assets/[name].js',
        chunkFileNames: 'assets/[name].js',
        assetFileNames: 'assets/[name].[ext]'
      }
    }
  }
})
</file>

<file path=".gitignore">
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Build outputs
dist/
build/
.wrangler/

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
.dev.vars

# IDE files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
logs/
*.log

# Runtime data
pids/
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/

# Temporary folders
tmp/
temp/

# Wrangler state
.wrangler/state/

# TypeScript
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# next.js build output
.next

# nuxt.js build output
.nuxt

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port
</file>

<file path="src/index.css">
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

:root {
  --gradient-primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  --gradient-success: linear-gradient(135deg, #10b981 0%, #059669 100%);
  --gradient-danger: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
  --gradient-warning: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
  --gradient-success-bg: linear-gradient(135deg, #d1fae5 0%, #a7f3d0 100%);
  --border-radius: 12px;
  --border-color: #e5e7eb;
  --text-primary: #374151;
  --text-secondary: #6b7280;
  --bg-light: #f9fafb;
  --transition: all 0.3s ease;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
  background: var(--gradient-primary);
  min-height: 100vh;
  padding: 20px;
}

.container {
  max-width: 800px;
  margin: 0 auto;
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(10px);
  border-radius: 20px;
  box-shadow: 0 20px 40px rgba(0,0,0,0.1);
  overflow: hidden;
}

.header {
  background: var(--gradient-primary);
  color: white;
  padding: 40px 30px;
  text-align: center;
}

.header h1 {
  font-size: 2.5rem;
  font-weight: 700;
  margin-bottom: 10px;
  text-shadow: 0 2px 4px rgba(0,0,0,0.3);
}

.header p {
  opacity: 0.9;
  font-size: 1.1rem;
}

.form-container {
  padding: 40px 30px;
}

.form-group {
  margin-bottom: 30px;
}

.form-row {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 20px;
}

label {
  display: block;
  margin-bottom: 8px;
  font-weight: 600;
  color: var(--text-primary);
  font-size: 0.95rem;
}

input:not([type="checkbox"]), select {
  width: 100%;
  padding: 15px 20px;
  border: 2px solid var(--border-color);
  border-radius: var(--border-radius);
  font-size: 16px;
  transition: var(--transition);
  background: var(--bg-light);
  display: block;
}

input:not([type="checkbox"]):focus, select:focus {
  outline: none;
  border-color: #667eea;
  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
  background: white;
}

.card {
  padding: 20px;
  border: 2px solid var(--border-color);
  border-radius: var(--border-radius);
  background: var(--bg-light);
}

.btn {
  padding: 12px 24px;
  border: none;
  border-radius: 8px;
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition);
  color: white;
}

.btn:hover {
  transform: translateY(-1px);
}

.btn-danger {
  background: var(--gradient-danger);
}

.btn-danger:hover {
  box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
}

.btn-success {
  background: var(--gradient-success);
}

.btn-success:hover {
  box-shadow: 0 8px 25px rgba(16, 185, 129, 0.3);
}

.activities {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 15px;
  margin-top: 15px;
}

.activity-item {
  display: flex;
  flex-direction: column;
  align-items: stretch;
  cursor: pointer;
  transition: var(--transition);
}

.activity-item.card {
  padding: 20px;
}

.activity-item:hover {
  border-color: #667eea;
  background: white;
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(102, 126, 234, 0.15);
}

.activity-item input[type="checkbox"] {
  width: auto;
  margin-right: 12px;
  transform: scale(1.2);
  flex-shrink: 0;
}

.activity-item input[type="text"] {
  margin-top: 12px;
  font-size: 14px;
  padding: 10px 15px;
}

.activity-item span {
  font-weight: 500;
  color: var(--text-primary);
}

.risk-text {
  font-size: 0.85rem;
  color: var(--text-secondary);
  margin-top: 8px;
  font-style: italic;
}

.master-checkbox {
  display: flex;
  align-items: center;
  padding: 20px;
  background: #f0f9ff;
  border: 2px solid #0ea5e9;
  border-radius: var(--border-radius);
}

.master-checkbox input {
  width: auto;
  margin-right: 12px;
  transform: scale(1.3);
}

.master-checkbox span {
  font-weight: 600;
  color: #0c4a6e;
}

.signature-section {
  background: var(--bg-light);
  border-radius: var(--border-radius);
  padding: 25px;
  border: 2px solid var(--border-color);
}

.signature-label {
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 15px;
  display: block;
}

.signature-pad {
  border: 2px solid #d1d5db;
  border-radius: var(--border-radius);
  cursor: crosshair;
  background: white;
  box-shadow: inset 0 2px 4px rgba(0,0,0,0.06);
}

.submit-btn {
  width: 100%;
  padding: 18px;
  font-size: 18px;
  border-radius: var(--border-radius);
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.submit-btn.btn-success {
  transform: translateY(0);
}

.submit-btn.btn-success:hover {
  transform: translateY(-2px);
}

.submit-btn:disabled {
  background: #9ca3af;
  cursor: not-allowed;
  transform: none;
  box-shadow: none;
}

.hidden {
  display: none;
}

.success {
  text-align: center;
  padding: 40px 30px;
  background: var(--gradient-success-bg);
  border-radius: var(--border-radius);
  margin-top: 30px;
  border: 2px solid #10b981;
}

.success h2 {
  color: #065f46;
  font-size: 2rem;
  margin-bottom: 20px;
}

.success-message {
  color: #047857;
  font-size: 1.1rem;
  margin-bottom: 20px;
}

.access-codes {
  background: var(--gradient-warning);
  border: 2px solid #f59e0b;
  border-radius: var(--border-radius);
  padding: 25px;
  margin-top: 20px;
}

.access-codes h3 {
  color: #92400e;
  margin-bottom: 20px;
  font-size: 1.3rem;
}

.code-item {
  margin: 15px 0;
  padding: 20px;
  background: white;
  border-radius: 8px;
  border: 1px solid #f59e0b;
  box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

.code-value {
  font-size: 24px;
  font-weight: 700;
  color: #dc2626;
  text-align: center;
  margin-top: 8px;
}

.loading {
  display: inline-block;
  width: 20px;
  height: 20px;
  border: 3px solid rgba(255,255,255,.3);
  border-radius: 50%;
  border-top-color: #fff;
  animation: spin 1s ease-in-out infinite;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

@media (max-width: 768px) {
  .form-row {
    grid-template-columns: 1fr;
  }
  .activities {
    grid-template-columns: 1fr;
  }
  .container {
    margin: 10px;
    border-radius: 15px;
  }
  .header h1 {
    font-size: 2rem;
  }
  .signature-pad {
    width: 100%;
    height: 150px;
  }
}
</file>

<file path="src/App.jsx">
import { useState, useRef } from 'react'

const ACTIVITIES = [
  { id: 'archery', name: '🏹 Archery', risk: 'Sharp objects and physical exertion' },
  { id: 'swimming', name: '🏊 Swimming', risk: 'Water hazards and physical exertion' },
  { id: 'hiking', name: '🥾 Hiking', risk: 'Uneven terrain and weather conditions' },
  { id: 'rock-climbing', name: '🧗 Rock Climbing', risk: 'Heights and physical exertion' },
  { id: 'kayaking', name: '🛶 Kayaking', risk: 'Water hazards and weather conditions' }
]

const PROPERTIES = [
  { id: 'resort-a', name: '🏨 Resort A' },
  { id: 'resort-b', name: '🏨 Resort B' },
  { id: 'campground', name: '🏕️ Campground' }
]

const getCanvasContext = (canvasRef) => {
  const canvas = canvasRef.current
  return { canvas, ctx: canvas.getContext('2d'), rect: canvas.getBoundingClientRect() }
}

const getPointerCoords = (e, rect) => ({
  x: (e.touches?.[0]?.clientX || e.clientX) - rect.left,
  y: (e.touches?.[0]?.clientY || e.clientY) - rect.top
})

const SignaturePad = ({ onSignatureChange }) => {
  const canvasRef = useRef(null)
  const [isDrawing, setIsDrawing] = useState(false)

  const startDrawing = (e) => {
    e.preventDefault()
    setIsDrawing(true)
    const { ctx, rect } = getCanvasContext(canvasRef)
    const { x, y } = getPointerCoords(e, rect)
    ctx.beginPath()
    ctx.moveTo(x, y)
  }

  const draw = (e) => {
    e.preventDefault()
    if (!isDrawing) return
    const { ctx, rect } = getCanvasContext(canvasRef)
    const { x, y } = getPointerCoords(e, rect)
    ctx.lineTo(x, y)
    ctx.stroke()
  }

  const stopDrawing = (e) => {
    e.preventDefault()
    if (!isDrawing) return
    setIsDrawing(false)
    onSignatureChange(canvasRef.current.toDataURL())
  }

  const clearSignature = () => {
    const { ctx, canvas } = getCanvasContext(canvasRef)
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    onSignatureChange('')
  }

  return (
    <div className="signature-section">
      <label className="signature-label">Digital Signature</label>
      <canvas
        ref={canvasRef}
        width={700}
        height={150}
        className="signature-pad"
        style={{ display: 'block', width: '100%', maxWidth: '700px' }}
        onMouseDown={startDrawing}
        onMouseMove={draw}
        onMouseUp={stopDrawing}
        onMouseLeave={stopDrawing}
        onTouchStart={startDrawing}
        onTouchMove={draw}
        onTouchEnd={stopDrawing}
      />
      <button type="button" className="btn btn-danger clear-signature" onClick={clearSignature}>
        🗑️ Clear Signature
      </button>
    </div>
  )
}

const App = () => {
  const [form, setForm] = useState({ property: '', checkinDate: '', name: '', email: '', signature: '' })
  const [selected, setSelected] = useState([])
  const [initials, setInitials] = useState({})
  const [submitting, setSubmitting] = useState(false)
  const [success, setSuccess] = useState(null)

  const updateForm = (e) => setForm({ ...form, [e.target.name]: e.target.value })

  const updateInitials = (id, value) => setInitials({ ...initials, [id]: value })

  const toggleActivity = (id) => {
    if (selected.includes(id)) {
      setSelected(selected.filter(i => i !== id))
      const { [id]: _, ...rest } = initials
      setInitials(rest)
    } else {
      setSelected([...selected, id])
    }
  }

  const toggleAll = () => {
    if (selected.length === ACTIVITIES.length) {
      setSelected([])
      setInitials({})
    } else {
      setSelected(ACTIVITIES.map(a => a.id))
    }
  }

  const isValid = selected.length > 0 && selected.every(id => initials[id]?.trim())

  const submit = async (e) => {
    e.preventDefault()
    if (!isValid) return alert('Please select activities and enter initials')

    setSubmitting(true)
    try {
      const response = await fetch('/submit', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ ...form, activities: selected, activityInitials: initials })
      })
      const result = await response.json()
      result.success ? setSuccess(result) : alert('Error: ' + result.error)
    } catch (error) {
      alert('Error: ' + error.message)
    } finally {
      setSubmitting(false)
    }
  }

  const FormField = ({ label, name, type = 'text', ...props }) => (
    <div className="form-group">
      <label htmlFor={name}>{label}</label>
      <input id={name} name={name} type={type} value={form[name]} onChange={updateForm} required {...props} />
    </div>
  )

  if (success) return (
    <div className="container">
      <div className="header">
        <h1>Activity Waiver System</h1>
        <p>Complete your activity waivers and get instant access codes</p>
      </div>
      <div className="form-container">
        <div className="success">
          <h2>🎉 Success!</h2>
          <p className="success-message">{success.message}</p>
          {success.archeryPin && (
            <div className="access-codes">
              <h3>🎯 Archery Access PIN</h3>
              <div className="code-item">
                <div className="code-value" style={{ fontSize: '32px', fontWeight: 'bold', color: '#d63031' }}>
                  {success.archeryPin}
                </div>
                <p style={{ fontSize: '14px', color: '#666', marginTop: '10px' }}>
                  Use this PIN to access the archery area
                </p>
              </div>
            </div>
          )}
          <button
            type="button"
            onClick={() => setSuccess(null)}
            className="submit-btn btn btn-success"
            style={{ marginTop: '20px' }}
          >
            ← Submit Another Waiver
          </button>
        </div>
      </div>
    </div>
  )

  return (
    <div className="container">
      <div className="header">
        <h1>Activity Waiver System</h1>
        <p>Complete your activity waivers and get instant access codes</p>
      </div>
      <div className="form-container">
        <form onSubmit={submit}>
          <div className="form-row">
            <div className="form-group">
              <label htmlFor="property">Property</label>
              <select id="property" name="property" value={form.property} onChange={updateForm} required>
                <option value="">Select Property</option>
                {PROPERTIES.map(p => <option key={p.id} value={p.id}>{p.name}</option>)}
              </select>
            </div>
            <FormField label="Check-in Date" name="checkinDate" type="date" />
          </div>

          <div className="form-row">
            <FormField label="Full Name" name="name" placeholder="Enter your full name" />
            <FormField label="Email Address" name="email" type="email" placeholder="your.email@example.com" />
          </div>

          <div className="form-group">
            <label>Select Activities</label>
            <div className="activities">
              {ACTIVITIES.map(activity => {
                const isSelected = selected.includes(activity.id)
                return (
                  <div
                    key={activity.id}
                    className={`activity-item card ${isSelected ? 'selected' : ''}`}
                    style={{ borderColor: isSelected ? '#667eea' : '', background: isSelected ? 'white' : '' }}
                    onClick={() => toggleActivity(activity.id)}
                  >
                    <div style={{ display: 'flex', alignItems: 'center' }}>
                      <input
                        type="checkbox"
                        checked={isSelected}
                        onChange={() => {}}
                        style={{ pointerEvents: 'none' }}
                      />
                      <span>{activity.name}</span>
                    </div>
                    {isSelected && (
                      <>
                        <div className="risk-text">{activity.risk}</div>
                        <input
                          type="text"
                          value={initials[activity.id] || ''}
                          onChange={(e) => { e.stopPropagation(); updateInitials(activity.id, e.target.value) }}
                          onClick={(e) => e.stopPropagation()}
                          placeholder="Enter initials (e.g., JD)"
                          maxLength={5}
                          required
                        />
                      </>
                    )}
                  </div>
                )
              })}
            </div>
            <button
              type="button"
              onClick={toggleAll}
              className={`btn ${selected.length === ACTIVITIES.length ? 'btn-danger' : ''}`}
              style={{
                marginTop: '15px',
                background: selected.length === ACTIVITIES.length ? '' : 'var(--gradient-primary)',
                fontSize: '14px'
              }}
            >
              {selected.length === ACTIVITIES.length ? '✕ Clear All' : '✓ Select All'}
            </button>
          </div>

          <div className="form-group">
            <label className="master-checkbox">
              <input type="checkbox" required />
              <span>✅ I accept all terms and conditions for selected activities</span>
            </label>
          </div>

          <div className="form-group">
            <SignaturePad onSignatureChange={(sig) => setForm({ ...form, signature: sig })} />
          </div>

          <button type="submit" className="submit-btn btn btn-success" disabled={submitting || !isValid}>
            {submitting ? <><span className="loading"></span> Processing...</> : 'Submit Waiver'}
          </button>
        </form>
      </div>
    </div>
  )
}

export default App
</file>

<file path="utils.js">
export function generateId() {
  return new Date().getTime().toString()
}

export async function renderPdf(activity, data, pin, env) {
  try {
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <title>Activity Waiver - ${activity}</title>
        <style>
          body { 
            font-family: Arial, sans-serif; 
            margin: 40px; 
            line-height: 1.6; 
            color: #333;
            max-width: 800px;
          }
          .header { 
            text-align: center; 
            border-bottom: 2px solid #333; 
            padding-bottom: 20px; 
            margin-bottom: 30px; 
          }
          .title { 
            font-size: 18px; 
            font-weight: bold; 
            margin-bottom: 10px; 
          }
          .subtitle { 
            font-size: 12px; 
            margin-bottom: 5px; 
          }
          .content { 
            margin-bottom: 30px; 
          }
          .section-title { 
            font-size: 14px; 
            font-weight: bold; 
            margin-top: 20px; 
            margin-bottom: 10px; 
          }
          .paragraph { 
            margin-bottom: 10px; 
          }
          .list { 
            margin-left: 20px; 
            margin-bottom: 10px; 
          }
          .list-item { 
            margin-bottom: 5px; 
          }
          .signature-section { 
            margin-top: 40px; 
            border-top: 1px solid #ccc; 
            padding-top: 20px; 
          }
          .signature-box { 
            display: inline-block; 
            width: 200px; 
            height: 80px; 
            border: 1px solid #333; 
            margin: 10px 0; 
            vertical-align: top;
          }
          .signature-image { 
            max-width: 180px; 
            max-height: 70px; 
            object-fit: contain;
          }
          .access-code { 
            font-size: 20px; 
            font-weight: bold; 
            color: #d63031; 
            text-align: center; 
            margin: 20px 0; 
            background-color: #fff3cd; 
            padding: 15px; 
            border: 1px solid #ffeaa7; 
            border-radius: 4px;
          }
          .footer { 
            margin-top: 40px; 
            font-size: 10px; 
            color: #666; 
            text-align: center; 
          }
        </style>
      </head>
      <body>
        <div class="header">
          <div class="title">Activity Waiver - ${activity.toUpperCase()}</div>
          <div class="subtitle">Property: ${data.property} | Check-in: ${data.checkinDate}</div>
          <div class="subtitle">Participant: ${data.name} | Date: ${new Date().toLocaleDateString()}</div>
        </div>

        <div class="content">
          <div class="section-title">Release and Waiver of Liability</div>
          <div class="paragraph">
            I, ${data.name}, acknowledge that I am voluntarily participating in ${activity} activities at ${data.property}.
          </div>
          
          <div class="section-title">Risks and Hazards</div>
          <div class="paragraph">
            I understand that ${activity} involves inherent risks including but not limited to:
          </div>
          <div class="list">
            <div class="list-item">• Physical injury or death</div>
            <div class="list-item">• Equipment failure or malfunction</div>
            <div class="list-item">• Weather conditions</div>
            <div class="list-item">• Terrain hazards</div>
            <div class="list-item">• Other participants' actions</div>
          </div>

          <div class="section-title">Assumption of Risk</div>
          <div class="paragraph">
            I voluntarily assume all risks associated with participation in ${activity} activities.
          </div>

          <div class="section-title">Release of Liability</div>
          <div class="paragraph">
            I hereby release, waive, and discharge ${data.property} from any and all claims, demands, or causes of action arising from my participation.
          </div>

          <div class="section-title">Medical Treatment</div>
          <div class="paragraph">
            I consent to emergency medical treatment if necessary and agree to be responsible for all medical expenses.
          </div>

          <div class="section-title">Governing Law</div>
          <div class="paragraph">
            This waiver shall be governed by the laws of the jurisdiction where ${data.property} is located.
          </div>
        </div>

        <div class="signature-section">
          <div class="paragraph">
            <strong>Participant Initials:</strong> ${data.initials}
          </div>
          <div class="paragraph">
            <strong>Signature:</strong>
          </div>
          <div class="signature-box">
            ${data.signature ? `<img src="${data.signature}" class="signature-image" />` : ''}
          </div>
          <div class="paragraph">
            <strong>Date:</strong> ${new Date().toLocaleDateString()}
          </div>

          ${pin ? `
          <div class="access-code">
            <div>Archery Access PIN: ${pin}</div>
            <div style="font-size: 10px; margin-top: 5px;">
              Use this PIN to access the archery area
            </div>
          </div>
          ` : ''}
        </div>

        <div class="footer">
          <div>Document ID: ${generateId()}</div>
          <div>Generated: ${new Date().toISOString()}</div>
          <div>Version: ${env.VERSION || '1.0'}</div>
        </div>
      </body>
      </html>
    `

    if (env && env.BROWSER) {
      try {
        const puppeteer = await import('@cloudflare/puppeteer')
        const browser = await puppeteer.launch(env.BROWSER, {
          args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-gpu',
            '--disable-web-security',
            '--disable-features=VizDisplayCompositor'
          ]
        })
        const page = await browser.newPage()
        
        await page.setViewport({ width: 800, height: 600 })
        await page.setJavaScriptEnabled(false)
        
        await page.setContent(html, { waitUntil: 'networkidle0' })
        
        const pdf = await page.pdf({
          format: 'A4',
          margin: {
            top: '20px',
            right: '20px', 
            bottom: '20px',
            left: '20px'
          },
          printBackground: false,
          preferCSSPageSize: false,
          displayHeaderFooter: false,
          scale: 0.8
        })
        
        await browser.close()
        
        return new Uint8Array(pdf)
      } catch (browserError) {
        console.warn('Browser Rendering API failed, falling back to HTML:', browserError.message)
        return new TextEncoder().encode(html)
      }
    } else {
      return new TextEncoder().encode(html)
    }
    
  } catch (error) {
    console.error('Error generating PDF:', error)
    throw new Error(`Failed to generate PDF: ${error.message}`)
  }
}

export async function sendEmail(env, email, name, pdfs, archeryPin) {
  try {
    if (!env.RESEND_API_KEY) {
      console.error('Resend API key not configured')
      return { success: false, message: 'Email service not configured. Set RESEND_API_KEY secret.' }
    }

    const attachments = []
    for (const pdf of pdfs) {
      try {
        const docData = await env.PDF_STORAGE.get(pdf.key)
        if (docData) {
          const docBuffer = await docData.arrayBuffer()
          const base64Doc = btoa(String.fromCharCode(...new Uint8Array(docBuffer)))
          attachments.push({
            filename: `${pdf.activity}-waiver.pdf`,
            content: base64Doc
          })
        }
      } catch (error) {
        console.error(`Error retrieving PDF ${pdf.key}:`, error)
      }
    }

    const htmlContent = `
      <html>
      <body style="font-family: Arial, sans-serif; line-height: 1.6;">
        <h2>Activity Waiver Confirmation</h2>
        <p>Dear ${name},</p>
        <p>Thank you for completing your activity waivers. Your documents have been processed successfully.</p>

        <h3>Activities Covered:</h3>
        <ul>
          ${pdfs.map(pdf => `<li>${pdf.activity.charAt(0).toUpperCase() + pdf.activity.slice(1)}</li>`).join('')}
        </ul>

        ${archeryPin ? `
        <div style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; margin: 20px 0; border-radius: 4px;">
          <h3 style="color: #d63031; margin-top: 0;">🏹 Archery Access PIN:</h3>
          <p style="font-size: 24px; font-weight: bold; color: #d63031;">${archeryPin}</p>
          <p><small>Use this PIN to access the archery area during your stay.</small></p>
        </div>
        ` : ''}

        <p>Please find your signed waiver documents attached to this email.</p>
        <p>Please keep this email for your records.</p>
        <p>Have a great time!</p>

        <hr style="margin: 30px 0;">
        <p style="font-size: 12px; color: #666;">
          This email was automatically generated. Please do not reply to this message.
        </p>
      </body>
      </html>
    `

    const response = await fetch('https://api.resend.com/emails', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${env.RESEND_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        from: env.EMAIL_FROM,
        to: email,
        subject: 'Activity Waiver Documents',
        html: htmlContent,
        attachments
      })
    })

    const result = await response.json()

    if (!response.ok) {
      console.error('Resend API error:', result)
      return { success: false, message: result.message || 'Email sending failed' }
    }

    console.log('Email sent successfully via Resend:', result.id)
    return { success: true, message: 'Email sent successfully' }

  } catch (error) {
    console.error('Error sending email:', error)
    return { success: false, message: error.message }
  }
}
</file>

<file path="worker.js">
import { renderPdf, sendEmail, generateId } from './utils.js'

const jsonResponse = (data, status = 200) =>
  new Response(JSON.stringify(data), {
    status,
    headers: { 'Content-Type': 'application/json' }
  })

const errorResponse = (message, status = 400) =>
  jsonResponse({ error: message }, status)

const buildPdfStorageKey = (checkinDate, property, activity, name, id) => {
  const date = new Date(checkinDate)
  const year = date.getFullYear()
  const month = String(date.getMonth() + 1).padStart(2, '0')
  const day = String(date.getDate()).padStart(2, '0')
  return `waivers/${year}/${month}/${day}/${property}/${activity}/${name.replace(' ', '-').toLowerCase()}-${id}.pdf`
}

const getArcheryPin = (activities, env) =>
  activities.includes('archery') ? env.ARCHERY_PIN : null

const saveSubmissionToDb = (env, id, data) =>
  env.DB.prepare(`
    INSERT INTO submissions (id, property, checkin_date, name, email, activities, activity_initials, signature, created_at)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
  `).bind(
    id,
    data.property,
    data.checkinDate,
    data.name,
    data.email,
    JSON.stringify(data.activities),
    JSON.stringify(data.activityInitials),
    data.signature,
    new Date().toISOString()
  ).run()

const saveDocumentToDb = (env, submissionId, activity, storageKey) =>
  env.DB.prepare(`
    INSERT INTO documents (submission_id, activity, storage_key, created_at)
    VALUES (?, ?, ?, ?)
  `).bind(submissionId, activity, storageKey, new Date().toISOString()).run()

export default {
  async fetch(request, env, ctx) {
    const { pathname, searchParams } = new URL(request.url)
    const { method } = request

    if (method === 'POST' && pathname === '/submit') {
      return handleSubmit(request, env, ctx)
    }

    if (method === 'GET' && pathname === '/admin/search') {
      return handleAdminSearch(request, env)
    }

    if (method === 'GET' && pathname === '/status') {
      return jsonResponse({ status: 'ok' })
    }

    return new Response('Not Found', { status: 404 })
  }
}

async function handleSubmit(request, env, ctx) {
  try {
    const data = await request.json()
    const { property, checkinDate, name, email, activities, activityInitials, signature } = data

    if (!property || !checkinDate || !name || !email || !activities?.length || !activityInitials || !signature) {
      return errorResponse('Missing required fields')
    }

    const submissionId = generateId()
    const archeryPin = getArcheryPin(activities, env)

    await saveSubmissionToDb(env, submissionId, data)

    ctx.waitUntil(processPdfsAndEmail(env, {
      submissionId,
      property,
      checkinDate,
      name,
      email,
      activities,
      activityInitials,
      signature,
      archeryPin
    }))

    return jsonResponse({
      success: true,
      submissionId,
      archeryPin,
      message: 'Submission received! PDFs are being generated and will be emailed shortly.'
    })

  } catch (error) {
    return errorResponse(error.message, 500)
  }
}

async function processPdfsAndEmail(env, data) {
  const { submissionId, property, checkinDate, name, email, activities, activityInitials, signature, archeryPin } = data

  try {
    console.log(`Starting parallel PDF generation for ${activities.length} activities`)

    const pdfResults = await Promise.all(activities.map(async (activity, index) => {
      const pin = activity === 'archery' ? archeryPin : null
      const key = buildPdfStorageKey(checkinDate, property, activity, name, submissionId)

      try {
        console.log(`Generating PDF ${index + 1}/${activities.length} for activity: ${activity}`)

        const pdf = await renderPdf(activity, {
          property,
          checkinDate,
          name,
          initials: activityInitials[activity],
          signature
        }, pin, env)

        await env.PDF_STORAGE.put(key, pdf)
        await saveDocumentToDb(env, submissionId, activity, key)

        return { activity, key, success: true }
      } catch (error) {
        console.error(`Failed to generate PDF for activity ${activity}:`, error.message)
        return { activity, key, success: false, error: error.message }
      }
    }))

    const successfulPdfs = pdfResults.filter(pdf => pdf.success)

    console.log(`PDF generation complete: ${successfulPdfs.length}/${activities.length} successful`)

    if (successfulPdfs.length > 0) {
      const emailResult = await sendEmail(env, email, name, successfulPdfs, archeryPin)
      console.log('Email result:', emailResult)
    } else {
      console.error('No PDFs were generated successfully, skipping email')
    }

  } catch (error) {
    console.error('Error in async PDF processing:', error)
  }
}

async function handleAdminSearch(request, env) {
  const query = new URL(request.url).searchParams.get('q')

  if (!query) {
    return errorResponse('Query parameter required')
  }

  const searchPattern = `%${query}%`
  const results = await env.DB.prepare(`
    SELECT * FROM submissions
    WHERE name LIKE ? OR email LIKE ? OR property LIKE ? OR checkin_date LIKE ?
    ORDER BY created_at DESC
    LIMIT 50
  `).bind(searchPattern, searchPattern, searchPattern, searchPattern).all()

  return jsonResponse({ results: results.results })
}
</file>

<file path="README.md">
# Waiver System - Cloudflare Workers

A modern waiver system built on Cloudflare Workers with React frontend, PDF generation, and email delivery.

## 🚀 Features

- **Single-page React app** with modern ES2025
- **Parallel PDF generation** using Cloudflare Browser Rendering API
- **Background processing** for instant user feedback
- **Email delivery** with PDF attachments via Resend API
- **D1 database** for submissions tracking
- **R2 storage** for PDF files
- **Assets binding** for static files (no KV needed)

## 🚀 Deployment

```bash
# Install dependencies
npm install

# Set secrets (first time only)
wrangler secret put RESEND_API_KEY
wrangler secret put EMAIL_FROM
wrangler secret put ARCHERY_PIN

# Build for production (migrations + vite build)
npm run build

# Build for local (migrations + vite build)
npm run build:local

# Deploy to Cloudflare Workers
npm run deploy

# Local development server
npm run dev
```

This project uses **Cloudflare's automatic build system** for deployments. When connected to your repository, Cloudflare will automatically build and deploy on every push to main.

## 🏗️ Architecture

```
┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
│   React SPA     │    │  Cloudflare      │    │   External      │
│   (Frontend)    │───▶│     Worker       │───▶│   Services      │
└─────────────────┘    └──────────────────┘    └─────────────────┘
                              │
                              ▼
                       ┌──────────────────┐
                       │   Cloudflare     │
                       │   Services       │
                       └──────────────────┘
                              │
                    ┌─────────┼─────────┐
                    ▼         ▼         ▼
              ┌─────────┐ ┌─────────┐ ┌─────────┐
              │   D1    │ │   R2    │ │ Assets  │
              │Database │ │Storage  │ │ Binding │
              └─────────┘ └─────────┘ └─────────┘
```

## 🔑 Configuration

### Secrets (use `wrangler secret put`)

```bash
# Set Resend API key
wrangler secret put RESEND_API_KEY
# Enter: re_xxxxxxxxxxxxx

# Set email sender address
wrangler secret put EMAIL_FROM
# Enter: noreply@yourdomain.com

# Set archery access PIN
wrangler secret put ARCHERY_PIN
# Enter: 1234
```

### Variables (in `wrangler.toml`)

```toml
[vars]
VERSION = "1.0"
```

## 📁 Project Structure

```
├── src/                  # React source code
├── dist/                 # Built React app
├── migrations/           # D1 database migrations
├── worker.js             # Cloudflare Worker entry point
├── utils.js              # PDF generation & email utilities
├── wrangler.toml         # Cloudflare configuration
└── package.json          # Dependencies & scripts
```

## 🚀 Performance Optimizations

- **Parallel PDF generation** (3-5x faster)
- **Background processing** (instant user feedback)
- **Optimized browser settings** (faster rendering)
- **Minimal dependencies** (smaller bundle size)
- **ES2025 modern syntax** (better performance)

## 🗄️ Database Migrations

This project uses **Wrangler D1 migrations** to manage database schema changes safely.

### Creating a New Migration

```bash
npm run db:migrations:create migration_name
```

### Applying Migrations

Migrations run automatically with `npm run build` (remote) and `npm run build:local` (local).

Manual commands:
```bash
npm run db:migrate:local    # Apply to local D1
npm run db:migrate:remote   # Apply to remote D1
npm run db:migrations:list  # Check migration status
```

### Migration Rules

1. **Never edit existing migrations** - Always create new ones
2. **Test locally first** - Run with `--local` before `--remote`
3. **Migrations are tracked** - D1 remembers which have run
4. **Use IF NOT EXISTS** - Keep migrations idempotent

### Example Migration

```sql
-- Add a new column
ALTER TABLE submissions ADD COLUMN phone TEXT;

-- Create index
CREATE INDEX IF NOT EXISTS idx_submissions_phone ON submissions (phone);
```

## 🔌 API Endpoints

- **POST /submit** - Submit waiver form with activity selections
- **GET /status** - Health check endpoint
- **GET /admin/search?q=query** - Search submissions by name, email, property, or check-in date

## 📧 Email Setup

1. Sign up at [resend.com](https://resend.com) and verify your domain
2. Create an API key
3. Set secrets:
   ```bash
   wrangler secret put RESEND_API_KEY
   wrangler secret put EMAIL_FROM
   ```
</file>

<file path="package.json">
{
  "name": "waiver-system",
  "version": "1.0.0",
  "type": "module",
  "engines": {
    "node": ">=24.0.0"
  },
  "scripts": {
    "dev": "wrangler dev",
    "build": "npm run db:migrate:remote && vite build",
    "build:local": "npm run db:migrate:local && vite build",
    "deploy": "wrangler deploy",
    "preview": "vite preview",
    "db:migrate:local": "npx wrangler d1 migrations apply DB --local",
    "db:migrate:remote": "npx wrangler d1 migrations apply DB --remote",
    "db:migrations:list": "npx wrangler d1 migrations list DB --remote",
    "db:migrations:create": "npx wrangler d1 migrations create DB"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@cloudflare/puppeteer": "^1.0.4",
    "@vitejs/plugin-react": "^4.0.0",
    "vite": "^7.1.8",
    "wrangler": "^4.40.3"
  }
}
</file>

<file path="wrangler.toml">
name = "waiver-system"
main = "worker.js"
compatibility_date = "2024-09-23"

compatibility_flags = ["nodejs_compat"]

[assets]
directory = "./dist"

[browser]
binding = "BROWSER"

[[r2_buckets]]
binding = "PDF_STORAGE"
bucket_name = "waiver-pdfs"

[[d1_databases]]
binding = "DB"
database_name = "waiver-db"
database_id = "9af8c837-9326-4723-9a5c-f048870aed7e"
migrations_dir = "migrations"

[vars]
VERSION = "1.0"
</file>

</files>
